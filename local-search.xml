<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>leecode 135 Single Number</title>
    <link href="/2021/07/03/leecode135SingleNumber/"/>
    <url>/2021/07/03/leecode135SingleNumber/</url>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><a href="http://">https://leetcode.com/problems/single-number/</a><br>找出数组中不相同的数组：给出一个非空整型数组，数组内的每个元素都出现了2次，只有1个数出现了一次，希望使用现行时间0（n）照吃只出现一次的数字。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">input</span>:nums=[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br><span class="hljs-attribute">output</span>:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>异或运算是指位与位之间遇到相同的则该位结果位0，不同的表示结果为1。数组nums中每个元素出现两次后，进行位运算后正好为0，最终位运算后的结果为单个的数据：single_data。</p><p> C++中使用^运算表示二进制的异或运算</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>^<span class="hljs-number">4</span>=<span class="hljs-number">6</span><br><span class="hljs-attribute">010</span>^<span class="hljs-number">100</span>=<span class="hljs-number">110</span><br></code></pre></td></tr></table></figure><p>异或^是一个重要的运算符，大量问题可以利用异或的特点找到解决方案。</p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> single_data=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            single_data=single_data^nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> single_data;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法</tag>
      
      <tag>leecode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++中vector的使用</title>
    <link href="/2021/07/03/C-%E4%B8%ADvector%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/07/03/C-%E4%B8%ADvector%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>vector是向量类型，可以容纳很多类型的数据，多以称其为容器，是STL的重要成员：使用时需要包含头文件：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span>;</span><br></code></pre></td></tr></table></figure><h4 id="初始化一个矢量向量"><a href="#初始化一个矢量向量" class="headerlink" title="初始化一个矢量向量"></a>初始化一个矢量向量</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//以创建int 为例</span><br>vector&lt;<span class="hljs-keyword">int</span>&gt;a=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><br><span class="hljs-comment">//定义10个整型元素的向量，给每个元素的初始值为1</span><br>vector &lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-built_in">a</span>(<span class="hljs-number">10</span>，<span class="hljs-number">1</span>);<br><br><br></code></pre></td></tr></table></figure><h4 id="其他常用到的函数"><a href="#其他常用到的函数" class="headerlink" title="其他常用到的函数"></a>其他常用到的函数</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//向量中元素的个数</span><br>a=<span class="hljs-built_in">size</span>();<br><br><span class="hljs-comment">//迭代器输出</span><br><br>vector &lt;<span class="hljs-keyword">int</span>&gt;a = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = a.<span class="hljs-built_in">begin</span>(); it != a.<span class="hljs-built_in">end</span>(); it++)<br>&#123;<br>cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-comment">//返回第一个元素</span><br>a.<span class="hljs-built_in">front</span>();<br><span class="hljs-comment">//返回最后一个元素</span><br>a.<span class="hljs-built_in">back</span>();<br><br><br><span class="hljs-comment">//不使用auto关键字</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">size</span>();i++)<br>&#123;<br>cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="关键字auto"><a href="#关键字auto" class="headerlink" title="关键字auto"></a>关键字auto</h4><ul><li>关键字auto在声明变量的时候根据变量的初始值的类型自动分配类型，自动类型的推断发生在编译期，不会造成程序运行时效率的降低。</li><li>可用于声明函数内部的变量类型</li><li>必须在定义时进行初始化，类似于const关键字</li><li>定义一个auto序列类型的变量必须始终在同一个类型</li><li>auto不是一个真正的类型，仅仅是一个占位符，不能使用一些操作函数：sizeof()等</li></ul>]]></content>
    
    
    <categories>
      
      <category>C++基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leecode 53.Maximum Subarry</title>
    <link href="/2021/07/03/leecode53/"/>
    <url>/2021/07/03/leecode53/</url>
    
    <content type="html"><![CDATA[<p><a href="http://">https://leetcode.com/problems/maximum-subarray/</a></p><h4 id="使用动态规划"><a href="#使用动态规划" class="headerlink" title="使用动态规划"></a>使用动态规划</h4><h4 id="添加了输出子序列"><a href="#添加了输出子序列" class="headerlink" title="添加了输出子序列"></a>添加了输出子序列</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/***使用动态规划，求数组中nums最大子序列的和；最终输出子序列***/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> nums[] = &#123; <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-5</span>, <span class="hljs-number">4</span> &#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> n = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(nums)/<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(n);<br><span class="hljs-keyword">int</span> nums_copy[n] = &#123;&#125;;<br><span class="hljs-built_in">memcpy</span>(nums_copy, nums,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(nums));<br><span class="hljs-keyword">int</span> max_data = nums[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (nums[i - <span class="hljs-number">1</span>] &gt; <span class="hljs-number">0</span>)<br>&#123;<br>nums[i] += nums[i - <span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br><span class="hljs-comment">//找到最大的和，与其值；</span><br><span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><br><span class="hljs-keyword">if</span> (max_data &lt; nums[i])<br>&#123;<br>max_data = nums[i];<br>k = i;<br>&#125;<br>&#125;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = k;; i--)<br>&#123;<br><span class="hljs-keyword">if</span> (nums[i] &lt; <span class="hljs-number">0</span>)<br>&#123;<br>t = i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>cout &lt;&lt; max_data &lt;&lt; endl;<br><span class="hljs-comment">//输出最大和的子序列</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = t + <span class="hljs-number">1</span>; i &lt;= k; i++)<br>cout &lt;&lt; nums_copy[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法</tag>
      
      <tag>leecode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开课吧3天玩转数据分析</title>
    <link href="/2021/06/19/%E5%BC%80%E8%AF%BE%E5%90%A73%E5%A4%A9%E7%8E%A9%E8%BD%AC%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <url>/2021/06/19/%E5%BC%80%E8%AF%BE%E5%90%A73%E5%A4%A9%E7%8E%A9%E8%BD%AC%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="python与数据分析基础工具"><a href="#python与数据分析基础工具" class="headerlink" title="python与数据分析基础工具"></a>python与数据分析基础工具</h2><p>如何利用数据驱动业务？？？<br>数字化转型</p><p>数据分析职业发展</p><p>数据工程师-&gt;数据分析师-&gt;数据挖掘工程师-&gt;数据科学家</p><h3 id="python-语言基础操作"><a href="#python-语言基础操作" class="headerlink" title="python 语言基础操作"></a>python 语言基础操作</h3><h3 id="1-1数据结构"><a href="#1-1数据结构" class="headerlink" title="1.1数据结构"></a>1.1数据结构</h3><p>常见的python数据结构包括：元组、列表、字典、集合</p><h4 id="1-1-1元组"><a href="#1-1-1元组" class="headerlink" title="1.1.1元组"></a>1.1.1元组</h4><p>元组是一个固定长度，不可改变的python 序列对象。创建元组最简单的方式，用逗号分隔一列值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tup=4,5,6</span><br><span class="line">print(tup)</span><br><span class="line">(4,5,6)</span><br></pre></td></tr></table></figure><p>嵌套复杂的元组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nested_tup=(4,5,6),(7,8)</span><br><span class="line">print(nested_tup)</span><br><span class="line">((4, 5, 6), (7, 8))</span><br></pre></td></tr></table></figure><p>可以使用tuple命令，将其他数据结构直接转化为元组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple([4,0,2])</span><br><span class="line">(4,0,2)</span><br></pre></td></tr></table></figure><p>将字符串转为元组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tur=tuple(&#x27;string&#x27;)</span><br><span class="line">print(tur)</span><br><span class="line">(&#x27;s&#x27;, &#x27;t&#x27;, &#x27;r&#x27;, &#x27;i&#x27;, &#x27;n&#x27;, &#x27;g&#x27;)</span><br></pre></td></tr></table></figure><p>元组一旦创建，元组中的对象就不能修改了</p><p>元组添加元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup=tuple([&#x27;foo&#x27;,[1,2],True])</span><br><span class="line">tup[1].append(3)</span><br><span class="line">print(tup)</span><br><span class="line">(&#x27;foo&#x27;, [1, 2, 3], True)</span><br></pre></td></tr></table></figure><p>如果将元祖赋值给类似元组的变量，python会尝试拆分等号右边的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup=(4,5,6)</span><br><span class="line">a,b,c=tup</span><br><span class="line">print(a)</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>tuple（元组）的应用场景主要有三个：、</p><ol><li>函数的参数和返回值，一个函数可以接收任意多个参数，一次返回多个数据</li><li>格式字符串</li><li>让列表不可以被修改，保护数据</li></ol><h4 id="1-1-2列表"><a href="#1-1-2列表" class="headerlink" title="1.1.2列表"></a>1.1.2列表</h4>]]></content>
    
    
    <categories>
      
      <category>pyhton</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pyhton数据结构</tag>
      
      <tag>numpy</tag>
      
      <tag>matplotlib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>念</title>
    <link href="/2021/06/17/%E5%BF%B5/"/>
    <url>/2021/06/17/%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="淮南先生与洛枳小姐"><a href="#淮南先生与洛枳小姐" class="headerlink" title="淮南先生与洛枳小姐"></a>淮南先生与洛枳小姐</h2><p>本来想写博客是想着记录研究生的学习之路，但最近似乎没有什么技术学习进展,就先写写我的淮南与洛枳的故事吧~</p><p>最近淮南先生在出差，来找洛枳小姐的计划泡汤了。洛枳小姐企盼许久见面就这么推迟了，毕竟他们已经有两个月的时间没有见面了。她非常生气，也觉得对这段从一开始就异地，到现在为止2年3个月的感情坚持不下去了，于是给淮南先生写了很长很长的一段话。大致意思就是感觉自己不能很好的理解他，希望有一个能在身边陪伴的人。自从淮南先生有了工资后，每天都会给洛枳小姐发红包。一开始是0.01元，洛枳小姐说这象征着他们每天都会再深爱一分。今年春节后，淮南先生给洛枳小姐涨工资了，每天0.52元。</p><p>那天早晨淮南先生依旧给洛枳小姐发了红包，却一句话都没有说。洛枳小姐猜想淮南先生肯定对她很失望，两个人或许就这样了吧，最美好的爱情可能就这样结束了吧。于是，一整天的时间浑浑噩噩，脑海中不断浮现遇见淮南先生的点点滴滴……</p><p>不知怎么，洛枳小姐回想初见淮南先生的画面，顿了一下，才想起那个片段。记不清具体时间了，也忘记了是哪个季节，春、夏初或是秋，只记得是阳光明媚的下午，阳光打在淮南先生的身上，整个人熠熠发光。正是高中生感情懵懂的时候，小女生在那一刻心里就烙下了眼前会发光的男孩~很久之后，洛枳小姐才知晓了男孩的姓名。慢慢地，在写作业的时候碰到男孩名字中的字都会觉得异常亲切，又悄悄的在本子上重复画着那个字；</p><p>日记中开始出现一个男生，昨天遇见他了，今天他穿的蓝色的衣服，明天他有体育课，下周一升国旗的播报会听见他的声音，最近一次的月考他又上榜了,突然感觉他有的时候很孤单，他似乎和好朋友又吵架了……似乎所有他的琐事她都知晓。</p><p>高中两年多的时间，洛枳小姐还是没有让淮南先生知道她的存在，她也不知道原因，可能是自己不是学霸，也并不是校园里漂亮的女孩就只是普通得不能再普通的学生，她啊，也只是众多关注淮南先生的女孩们中的一个微不足道的角色，总之，最后男孩不知道女孩的名字。</p><p>高考成绩出来了，女孩和家里边商量决定复读了。回到高中，熟悉的场景，但是好像找不到曾经熟悉的那个身影了，回想到这，现在思念的感觉似曾相识。几个月之后，女孩淘到了男孩的qq。就像得到了世界上最好的宝贝，满心期待、小心翼翼地在验证消息里输入‘一中校友’，等待男孩的验证通过。是的，那一刻感觉要飞起来，女孩也不知道说什么，但有了好友的关系总是让她兴奋的，因为他们之间总算有了点关系的。那段时间，聊的最多的就是放月假时的三五句话，但洛枳小姐都会收藏、截图保存、放进云盘中。</p><p>2016年8月26日，是淮南先生与洛枳小姐的第一次见面，他们约定在高中校门口。洛枳小姐清晰的记得，那天早上下着雨，是坐亲戚车到的校门口，雨淅淅沥沥的，下得不大不小。洛枳小姐买了一把蓝色的伞，撑着伞在学校门口边走边张望，过来许久，依旧没有淮南先生的消息，准备打道回府。犹豫着是否还继续等待，终于收到了他发过来的消息。他们走了很多路，似乎谈论得并不多，但很舒服，中午吃的米粉。雨过天晴，阳光刺眼灼人，他们在一个凉亭中歇下来……</p><p>2017年2月14日，是淮南先生与洛枳小姐的第二次见面。正月里总要和家人、同学聚聚，日子一天一天推，就巧合地到了情人节尴尬的日子。半年的时间，洛枳小姐曾有了一个男朋友，淮南先生也谈了一次恋爱，最后都分开了，洛枳小姐知道，她是无法放下烙在心里的男孩。中午依旧吃的米粉，然后淮南先生在车站送洛枳回家。</p><p>2017年4月22日，是淮南先生与洛枳小姐的第三次见面。这一天是洛枳小姐的生日，是她有了很久的愿望，希望淮南先生能陪她过一次生日，哪怕就一次。她前一天晚上坐火车，凌晨两点到达北京，淮南先生在车站等她，他们那个晚上都没有睡觉，四点多跑着去天安门看升旗，白天去了故宫、淮南先生的学校……通宵致使的迷迷糊糊，但和淮南先生在一起，那种感觉还是很美好。</p><p>2017年4月26日，淮南先生与洛枳小姐在一起了。<br><img src="/2021/06/17/%E5%BF%B5/nian.jpg"><br>…… ……<br>两人之间已经能接受距离、时间的考验，早已离不开彼此，这点小困难似乎不值一提。其实洛枳小姐在发出长长消息的那一刻就想撤回，但还是任性地想看看淮南先生的反应。</p><p>刚刚淮南先生发语音说，给洛枳小姐准备了礼物（听声音有幸福的味道），由快递小哥送过来，等待礼物中~<br>（ps:背景图是第三次见面，淮南先生拍的，影子里的两个人像不像在牵手~）</p>]]></content>
    
    
    <categories>
      
      <category>淮南洛枳</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/06/17/hello-world/"/>
    <url>/2021/06/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
